apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-dynamodb-nosql-lab-es
  namespace: girus
  labels:
    app: girus-lab-template
data:
  lab.yaml: |
    name: aws-dynamodb-nosql-es
    title: "AWS DynamoDB: Base de Datos NoSQL"
    description: "Explora Amazon DynamoDB, un servicio de base de datos NoSQL totalmente administrado. Aprende a crear tablas, administrar elementos, realizar consultas y configurar índices secundarios."
    duration: 25m
    timerEnabled: true
    maxDuration: 25m
    image: "linuxtips/girus-localstack:0.1"
    privileged: true
    type: "aws"
    entrypoint: "/entrypoint.sh"
    tasks:
      - name: "Creando y Configurando Tablas DynamoDB"
        description: "Aprende a crear tablas DynamoDB con claves primarias simples y compuestas"
        steps:
          - "Lista las tablas existentes (inicialmente no debe haber ninguna):"
          - "`aws dynamodb list-tables`"
          - "Crea una tabla con clave primaria simple:"
          - |
            aws dynamodb create-table \
              --table-name Productos \
              --attribute-definitions \
                  AttributeName=ProductoId,AttributeType=S \
              --key-schema \
                  AttributeName=ProductoId,KeyType=HASH \
              --provisioned-throughput \
                  ReadCapacityUnits=5,WriteCapacityUnits=5
          - "Crea una segunda tabla con clave primaria compuesta (hash + sort):"
          - |
            aws dynamodb create-table \
              --table-name Pedidos \
              --attribute-definitions \
                  AttributeName=ClienteId,AttributeType=S \
                  AttributeName=PedidoId,AttributeType=S \
              --key-schema \
                  AttributeName=ClienteId,KeyType=HASH \
                  AttributeName=PedidoId,KeyType=RANGE \
              --provisioned-throughput \
                  ReadCapacityUnits=5,WriteCapacityUnits=5
          - "Lista las tablas para confirmar que fueron creadas:"
          - "`aws dynamodb list-tables`"
          - "Obtén información detallada sobre una tabla:"
          - "`aws dynamodb describe-table --table-name Productos`"
        tips:
          - type: "info"
            title: "Claves primarias en DynamoDB"
            content: "DynamoDB soporta dos tipos de claves primarias: Clave de partición (hash) simple, y Clave compuesta (hash + sort). Elige según el patrón de acceso a tus datos."
          - type: "tip"
            title: "Capacidad provisionada vs bajo demanda"
            content: "En AWS real, puedes elegir entre el modo de capacidad provisionada (como usamos aquí) o el modo bajo demanda, que es más flexible pero puede ser más caro."
        validation:
          - command: "aws dynamodb list-tables --query 'TableNames[*]' | grep -q Productos && echo 'success' || echo 'error'"
            expectedOutput: "success"
            errorMessage: "La tabla Productos no fue creada correctamente."
          - command: "aws dynamodb list-tables --query 'TableNames[*]' | grep -q Pedidos && echo 'success' || echo 'error'"
            expectedOutput: "success"
            errorMessage: "La tabla Pedidos no fue creada correctamente."
      
      - name: "Insertando y Consultando Elementos"
        description: "Aprende a insertar, actualizar y consultar elementos en tablas DynamoDB"
        steps:
          - "Inserta un elemento en la tabla Productos:"
          - |
            aws dynamodb put-item \
              --table-name Productos \
              --item '{
                "ProductoId": {"S": "prod-001"},
                "Nombre": {"S": "Smartphone XYZ"},
                "Precio": {"N": "899.99"},
                "Categoria": {"S": "Electrónicos"},
                "Stock": {"N": "50"}
              }'
          - "Inserta otro elemento en la tabla Productos:"
          - |
            aws dynamodb put-item \
              --table-name Productos \
              --item '{
                "ProductoId": {"S": "prod-002"},
                "Nombre": {"S": "Notebook ABC"},
                "Precio": {"N": "2499.99"},
                "Categoria": {"S": "Computadoras"},
                "Stock": {"N": "15"}
              }'
          - "Inserta un elemento en la tabla Pedidos:"
          - |
            aws dynamodb put-item \
              --table-name Pedidos \
              --item '{
                "ClienteId": {"S": "cliente-001"},
                "PedidoId": {"S": "pedido-001"},
                "Fecha": {"S": "2023-04-01"},
                "Valor": {"N": "899.99"},
                "Productos": {"SS": ["prod-001"]}
              }'
          - "Obtén un elemento específico de la tabla Productos:"
          - |
            aws dynamodb get-item \
              --table-name Productos \
              --key '{"ProductoId": {"S": "prod-001"}}'
          - "Ejecuta un scan para ver todos los elementos en una tabla:"
          - "`aws dynamodb scan --table-name Productos`"
          - "Ejecuta una query usando la clave primaria (para la tabla Pedidos):"
          - |
            aws dynamodb query \
              --table-name Pedidos \
              --key-condition-expression "ClienteId = :clienteId" \
              --expression-attribute-values '{":clienteId": {"S": "cliente-001"}}'
        tips:
          - type: "warning"
            title: "Scan vs Query"
            content: "Evita usar Scan en ambientes de producción con grandes conjuntos de datos, pues examina toda la tabla. Query es más eficiente por usar índices."
          - type: "info"
            title: "Tipos de datos en DynamoDB"
            content: "DynamoDB soporta varios tipos: String (S), Number (N), Binary (B), Boolean (BOOL), Set (SS, NS, BS), Map (M), List (L) y Null."
        validation:
          - command: "aws dynamodb scan --table-name Productos --query 'Items[*].ProductoId.S' | grep -q prod-001 && echo 'success' || echo 'error'"
            expectedOutput: "success"
            errorMessage: "El elemento con ProductoId 'prod-001' no fue insertado correctamente en la tabla Productos."
          - command: "aws dynamodb scan --table-name Pedidos --query 'Items[*].ClienteId.S' | grep -q cliente-001 && echo 'success' || echo 'error'"
            expectedOutput: "success"
            errorMessage: "El elemento con ClienteId 'cliente-001' no fue insertado correctamente en la tabla Pedidos."
      
      - name: "Actualizando y Eliminando Elementos"
        description: "Aprende a actualizar y eliminar elementos en tablas DynamoDB"
        steps:
          - "Actualiza un elemento existente en la tabla Productos:"
          - |
            aws dynamodb update-item \
              --table-name Productos \
              --key '{"ProductoId": {"S": "prod-001"}}' \
              --update-expression "SET Precio = :precio, Stock = :stock" \
              --expression-attribute-values '{
                ":precio": {"N": "849.99"},
                ":stock": {"N": "45"}
              }' \
              --return-values ALL_NEW
          - "Verifica si la actualización fue exitosa:"
          - |
            aws dynamodb get-item \
              --table-name Productos \
              --key '{"ProductoId": {"S": "prod-001"}}'
          - "Agrega un nuevo atributo a un elemento existente:"
          - |
            aws dynamodb update-item \
              --table-name Productos \
              --key '{"ProductoId": {"S": "prod-002"}}' \
              --update-expression "SET Promocion = :promocion" \
              --expression-attribute-values '{
                ":promocion": {"BOOL": true}
              }' \
              --return-values ALL_NEW
          - "Elimina un atributo de un elemento:"
          - |
            aws dynamodb update-item \
              --table-name Productos \
              --key '{"ProductoId": {"S": "prod-001"}}' \
              --update-expression "REMOVE Categoria" \
              --return-values ALL_NEW
          - "Elimina un elemento completo de la tabla:"
          - |
            aws dynamodb delete-item \
              --table-name Pedidos \
              --key '{
                "ClienteId": {"S": "cliente-001"},
                "PedidoId": {"S": "pedido-001"}
              }'
          - "Verifica si el elemento fue eliminado:"
          - "`aws dynamodb scan --table-name Pedidos`"
        tips:
          - type: "info"
            title: "Expresiones de actualización"
            content: "DynamoDB usa expresiones de actualización con operadores como SET, REMOVE, ADD y DELETE para modificar elementos."
          - type: "warning"
            title: "Operaciones atómicas"
            content: "DynamoDB garantiza que las operaciones de actualización sean atómicas. Usa condiciones para garantizar que actualizaciones solo ocurran cuando ciertas condiciones se cumplan."
        validation:
          - command: "aws dynamodb get-item --table-name Productos --key '{\"ProductoId\": {\"S\": \"prod-001\"}}' --query 'Item.Precio.N' | grep -q 849.99 && echo 'success' || echo 'error'"
            expectedOutput: "success"
            errorMessage: "El precio del elemento no fue actualizado correctamente a 849.99."
          - command: "aws dynamodb get-item --table-name Productos --key '{\"ProductoId\": {\"S\": \"prod-001\"}}' --query 'Item.Categoria' | grep -q null && echo 'success' || echo 'error'"
            expectedOutput: "success"
            errorMessage: "El atributo Categoria no fue removido correctamente del elemento."
      
      - name: "Índices Secundarios y Consultas Avanzadas"
        description: "Configura índices secundarios y realiza consultas más complejas"
        steps:
          - "Crea una nueva tabla con un índice secundario global (GSI):"
          - |
            aws dynamodb create-table \
              --table-name Clientes \
              --attribute-definitions \
                  AttributeName=ClienteId,AttributeType=S \
                  AttributeName=Email,AttributeType=S \
                  AttributeName=Ciudad,AttributeType=S \
              --key-schema \
                  AttributeName=ClienteId,KeyType=HASH \
              --global-secondary-indexes \
                  IndexName=EmailIndex,KeySchema=[{AttributeName=Email,KeyType=HASH}],Projection={ProjectionType=ALL},ProvisionedThroughput={ReadCapacityUnits=5,WriteCapacityUnits=5} \
                  IndexName=CiudadIndex,KeySchema=[{AttributeName=Ciudad,KeyType=HASH}],Projection={ProjectionType=ALL},ProvisionedThroughput={ReadCapacityUnits=5,WriteCapacityUnits=5} \
              --provisioned-throughput \
                  ReadCapacityUnits=5,WriteCapacityUnits=5
          - "Inserta algunos clientes para probar los índices:"
          - |
            aws dynamodb put-item \
              --table-name Clientes \
              --item '{
                "ClienteId": {"S": "cli-001"},
                "Nombre": {"S": "Juan Pérez"},
                "Email": {"S": "juan@ejemplo.com"},
                "Ciudad": {"S": "Madrid"},
                "Telefono": {"S": "+34123456789"}
              }'
          - |
            aws dynamodb put-item \
              --table-name Clientes \
              --item '{
                "ClienteId": {"S": "cli-002"},
                "Nombre": {"S": "María García"},
                "Email": {"S": "maria@ejemplo.com"},
                "Ciudad": {"S": "Barcelona"},
                "Telefono": {"S": "+34987654321"}
              }'
          - "Consulta usando el índice secundario por email:"
          - |
            aws dynamodb query \
              --table-name Clientes \
              --index-name EmailIndex \
              --key-condition-expression "Email = :email" \
              --expression-attribute-values '{":email": {"S": "juan@ejemplo.com"}}'
          - "Consulta usando el índice secundario por ciudad:"
          - |
            aws dynamodb query \
              --table-name Clientes \
              --index-name CiudadIndex \
              --key-condition-expression "Ciudad = :ciudad" \
              --expression-attribute-values '{":ciudad": {"S": "Madrid"}}'
          - "Usa filtros para refinar resultados:"
          - |
            aws dynamodb scan \
              --table-name Productos \
              --filter-expression "Precio > :precio" \
              --expression-attribute-values '{":precio": {"N": "1000"}}'
        tips:
          - type: "info"
            title: "Índices Secundarios Globales (GSI)"
            content: "Los GSI permiten consultas en atributos que no son parte de la clave primaria. Tienen su propia capacidad provisionada y pueden usar diferentes claves de partición y ordenación."
          - type: "tip"
            title: "Proyecciones de índices"
            content: "Configura proyecciones de índices cuidadosamente. ProjectionType=ALL incluye todos los atributos, KEYS_ONLY solo las claves, e INCLUDE permite especificar atributos específicos."
          - type: "warning"
            title: "Costos de GSI"
            content: "Los GSI tienen costos adicionales por almacenamiento y capacidad. Úsalos estratégicamente según tus patrones de consulta."
        validation:
          - command: "aws dynamodb describe-table --table-name Clientes --query 'Table.GlobalSecondaryIndexes[*].IndexName' | grep -q EmailIndex && echo 'success' || echo 'error'"
            expectedOutput: "success"
            errorMessage: "El índice EmailIndex no fue creado correctamente."
          - command: "aws dynamodb query --table-name Clientes --index-name EmailIndex --key-condition-expression \"Email = :email\" --expression-attribute-values '{\":email\": {\"S\": \"juan@ejemplo.com\"}}' --query 'Items[*].Nombre.S' | grep -q Juan && echo 'success' || echo 'error'"
            expectedOutput: "success"
            errorMessage: "La consulta por email usando el GSI no retornó el resultado esperado."
