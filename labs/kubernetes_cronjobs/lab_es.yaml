apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-cronjobs-lab-es
  namespace: girus
  labels:
    app: girus-lab-template
data:
  lab.yaml: |
    name: kubernetes-cronjobs-es
    title: "Kubernetes: Automatizando Tareas con CronJobs"
    description: "Aprende a crear y administrar CronJobs en Kubernetes, programando tareas para ejecución automática en intervalos definidos. En este laboratorio guiado, aprenderás el concepto de CronJobs, su sintaxis de programación, cómo configurar políticas de retención de historial y monitorear sus ejecuciones."
    duration: 30m
    image: "linuxtips/girus-devops:0.1"
    privileged: true
    tasks:
      - name: "Conceptos de CronJobs en Kubernetes"
        description: "Comprende qué son los CronJobs, cuándo utilizarlos y cómo funciona la sintaxis de programación."
        steps:
          - "**¿Qué son los CronJobs en Kubernetes?**"
          - "Los CronJobs en Kubernetes son una extensión de los Jobs regulares, permitiendo que las tareas se ejecuten en horarios específicos o intervalos regulares, de forma similar a los cron jobs en sistemas Unix/Linux."
          - "**Características principales de los CronJobs:**"
          - "- **Ejecución programada**: Realizan tareas en horarios específicos o intervalos definidos"
          - "- **Basados en Jobs**: Cada ejecución de un CronJob crea un objeto Job"
          - "- **No interactivos**: Ideales para tareas en lote (backups, reportes, limpieza de datos, etc.)"
          - "- **Escalabilidad**: Kubernetes gestiona el ciclo de vida de los Pods creados"
          - "- **Historial de ejecuciones**: Mantiene registro de las ejecuciones anteriores"
          - "**Casos de uso comunes:**"
          - "- Generación de reportes periódicos"
          - "- Backups programados"
          - "- Limpieza de datos"
          - "- Alertas y verificaciones de salud"
          - "- Procesamiento en lote"
          - "- Sincronización de datos"
          - "**Sintaxis de programación (cron schedule):**"
          - "La sintaxis de programación sigue el formato tradicional del cron:"
          - "```"
          - "# ┌───────────── minuto (0 - 59)"
          - "# │ ┌───────────── hora (0 - 23)"
          - "# │ │ ┌───────────── día del mes (1 - 31)"
          - "# │ │ │ ┌───────────── mes (1 - 12)"
          - "# │ │ │ │ ┌───────────── día de la semana (0 - 6) (Domingo a Sábado)"
          - "# │ │ │ │ │                                   "
          - "# │ │ │ │ │"
          - "# │ │ │ │ │"
          - "# * * * * *"
          - "```"
          - "**Ejemplos de expresiones cron:**"
          - "- `*/5 * * * *`: Cada 5 minutos"
          - "- `0 */2 * * *`: Cada 2 horas (a las 0h, 2h, 4h, ...)"
          - "- `0 0 * * *`: Diariamente a medianoche"
          - "- `0 0 * * 0`: Semanalmente los domingos a medianoche"
          - "- `0 0 1 * *`: Mensualmente el primer día del mes"
          - "- `@hourly`: Cada hora (equivalente a `0 * * * *`)"
          - "- `@daily`: Diariamente (equivalente a `0 0 * * *`)"
          - "- `@weekly`: Semanalmente (equivalente a `0 0 * * 0`)"
          - "- `@monthly`: Mensualmente (equivalente a `0 0 1 * *`)"
          - "Para validar tu entendimiento, usa el comando abajo para ver la próxima ejecución programada de una expresión cron:"
          - "`kubectl create cronjob --image=busybox --schedule='*/5 * * * *' cronjob-ejemplo --dry-run=client -o yaml | grep schedule`"
        tips:
          - type: "info"
            title: "Nombres y Namespaces"
            content: "Los CronJobs, como todos los recursos de Kubernetes, son identificados de forma única por la combinación de su nombre y namespace."
          - type: "warning"
            title: "Timezone"
            content: "Los CronJobs operan usando UTC como timezone por defecto, no la zona horaria local de tu cluster. Considera esto al programar tareas."
          - type: "tip"
            title: "Probando Expresiones Cron"
            content: "Herramientas como 'cronexpressiondescriptor.com' o 'crontab.guru' pueden ayudar a verificar y entender expresiones cron."
        validation:
          - command: "kubectl api-resources | grep -i 'cronjob'"
            expectedExpression: "~ cronjobs"
            errorMessage: "API de CronJobs no encontrada en el cluster. Verifica que el cluster esté en ejecución."

      - name: "Creando tu Primer CronJob"
        description: "Crea un CronJob simple que ejecute una tarea cada minuto y observa su comportamiento."
        steps:
          - "**Creando un CronJob de ejemplo:**"
          - "Vamos a crear un CronJob básico que muestre la fecha y hora cada minuto. Este ejemplo ayudará a entender el ciclo de vida de un CronJob y cómo monitorearlo."
          - "Crea un archivo YAML llamado `hello-cronjob.yaml` con el siguiente contenido:"
          - "```yaml"
          - "apiVersion: batch/v1"
          - "kind: CronJob"
          - "metadata:"
          - "  name: hello"
          - "spec:"
          - "  schedule: \"*/1 * * * *\"  # Ejecuta cada minuto"
          - "  successfulJobsHistoryLimit: 3  # Mantiene historial de las últimas 3 ejecuciones exitosas"
          - "  failedJobsHistoryLimit: 1  # Mantiene historial de la última ejecución con falla"
          - "  concurrencyPolicy: Forbid  # No permite ejecuciones concurrentes"
          - "  jobTemplate:"
          - "    spec:"
          - "      template:"
          - "        spec:"
          - "          containers:"
          - "          - name: hello"
          - "            image: busybox"
          - "            args:"
          - "            - /bin/sh"
          - "            - -c"
          - "            - date; echo \"Hola desde Kubernetes CronJob\""
          - "          restartPolicy: OnFailure  # Política de reinicio en caso de falla"
          - "```"
          - "Vamos a examinar los principales campos de este CronJob:"
          - "- `schedule`: Expresión cron que define cuándo el Job será ejecutado"
          - "- `successfulJobsHistoryLimit`: Cuántos Jobs exitosos anteriores mantener para análisis"
          - "- `failedJobsHistoryLimit`: Cuántos Jobs con falla anteriores mantener para análisis"
          - "- `concurrencyPolicy`: Define cómo manejar nuevas ejecuciones cuando la anterior aún está en curso"
          - "  - `Allow` (por defecto): Permite ejecuciones simultáneas"
          - "  - `Forbid`: Impide nuevas ejecuciones mientras la actual está en curso"
          - "  - `Replace`: Cancela el Job en ejecución e inicia uno nuevo"
          - "- `jobTemplate`: El template para el Job que será creado en cada ejecución programada"
          - "- `restartPolicy`: Cómo manejar fallas de Pods (OnFailure, Never)"
          - "Guarda el archivo y aplícalo al cluster:"
          - "`kubectl apply -f hello-cronjob.yaml`"
          - "Vamos ahora a verificar si el CronJob fue creado:"
          - "`kubectl get cronjobs`"
          - "Debes ver una salida similar a esta:"
          - "```"
          - "NAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE"
          - "hello   */1 * * * *   False     0        <none>          30s"
          - "```"
          - "Como el CronJob está programado para ejecutar cada minuto, espera un momento y verifica nuevamente:"
          - "`kubectl get cronjobs`"
          - "Ahora la columna LAST SCHEDULE debe estar llena, indicando cuándo el CronJob fue ejecutado por última vez."
          - "**Examinando Jobs y Pods Creados:**"
          - "Cada ejecución del CronJob crea un Job. Vamos a verificar los Jobs creados:"
          - "`kubectl get jobs`"
          - "Verás Jobs con nombres que siguen el patrón `hello-<timestamp>`."
          - "Ahora, vamos a examinar los Pods creados por los Jobs:"
          - "`kubectl get pods`"
          - "**Verificando los Logs:**"
          - "Para ver la salida de tu CronJob, obtén el nombre del Pod más reciente y verifica sus logs:"
          - "`POD_NAME=$(kubectl get pods --sort-by=.metadata.creationTimestamp -o jsonpath='{.items[-1].metadata.name}')`"
          - "`kubectl logs $POD_NAME`"
          - "Debes ver la fecha y el mensaje \"Hola desde Kubernetes CronJob\"."
        tips:
          - type: "warning"
            title: "Limpieza Automática"
            content: "El controlador de CronJobs limpia automáticamente los Jobs completados basándose en los límites de historial definidos. Sin estos límites, tu cluster puede acumular muchos objetos innecesarios."
          - type: "info"
            title: "Suspendiendo CronJobs"
            content: "Si necesitas interrumpir temporalmente un CronJob sin eliminarlo, puedes suspenderlo: kubectl patch cronjob hello -p '{\"spec\":{\"suspend\":true}}'"
          - type: "tip"
            title: "Configuración de Recursos"
            content: "Para CronJobs en producción, siempre define límites de recursos (CPU/memoria) para garantizar estabilidad del cluster."
        validation:
          - command: "kubectl get cronjobs | grep -q hello && echo 'CronJob encontrado' || echo 'CronJob no encontrado'"
            expectedOutput: "CronJob encontrado"
            errorMessage: "El CronJob 'hello' no fue creado correctamente."
          - command: "kubectl get jobs --selector=job-name | wc -l"
            expectedExpression: "> 0"
            errorMessage: "Ningún Job fue creado por el CronJob. Tal vez sea necesario esperar el próximo minuto."

      - name: "Gestionando CronJobs"
        description: "Aprende a monitorear, modificar y solucionar problemas con CronJobs."
        steps:
          - "**Monitoreando CronJobs**"
          - "El monitoreo adecuado de los CronJobs es esencial para garantizar que tus tareas programadas estén funcionando según lo esperado."
          - "Para una vista detallada de tu CronJob, usa el comando:"
          - "`kubectl describe cronjob hello`"
          - "Presta atención a la sección 'Events', que registra las acciones recientes realizadas por el controlador del CronJob."
          - "**Verificando el Historial de Ejecuciones:**"
          - "Como configuramos nuestro CronJob para mantener un historial, podemos ver las ejecuciones anteriores:"
          - "`kubectl get jobs --selector=job-name`"
          - "**Editando un CronJob Existente:**"
          - "Vamos a modificar la programación de nuestro CronJob para que se ejecute cada 2 minutos, en lugar de cada minuto:"
          - "`kubectl edit cronjob hello`"
          - "- En el editor que se abre, localiza el campo `schedule` y cámbialo a `*/2 * * * *`"
          - "- Guarda el archivo y sal del editor (generalmente `:wq` en vim)"
          - "Verifica si el cambio fue aplicado:"
          - "`kubectl get cronjob hello -o jsonpath='{.spec.schedule}'`"
          - "La salida debe mostrar la nueva programación: `*/2 * * * *`"
          - "**Ejecutando un CronJob Manualmente:**"
          - "También puedes crear un Job a partir del template del CronJob en cualquier momento, sin esperar por la programación:"
          - "`kubectl create job --from=cronjob/hello hello-manual`"
          - "Verifica si el nuevo Job fue creado:"
          - "`kubectl get jobs`"
          - "Y examina los logs del Pod creado:"
          - "`POD_NAME=$(kubectl get pods --selector=job-name=hello-manual -o jsonpath='{.items[0].metadata.name}')`"
          - "`kubectl logs $POD_NAME`"
          - "**Pausando y Reanudando CronJobs:**"
          - "Si necesitas interrumpir temporalmente las ejecuciones programadas, puedes suspender el CronJob:"
          - "`kubectl patch cronjob hello -p '{\"spec\":{\"suspend\":true}}'`"
          - "Verifica si el CronJob fue suspendido:"
          - "`kubectl get cronjob hello`"
          - "La columna SUSPEND debe mostrar 'True'."
          - "Para reanudar la programación:"
          - "`kubectl patch cronjob hello -p '{\"spec\":{\"suspend\":false}}'`"
          - "**Eliminando un CronJob:**"
          - "Cuando ya no necesites el CronJob, puedes eliminarlo junto con todos sus Jobs asociados:"
          - "`kubectl delete cronjob hello`"
          - "Verifica si todos los Jobs relacionados también fueron eliminados:"
          - "`kubectl get jobs --selector=job-name`"
        tips:
          - type: "tip"
            title: "Mejores Prácticas"
            content: "Para tareas críticas, implementa alertas basadas en el estado de completación de los Jobs para ser notificado sobre fallas."
          - type: "warning"
            title: "Protección contra Fallas"
            content: "En ambientes de producción, configura timeouts apropiados y políticas de retry para hacer los CronJobs más resilientes a fallas temporales."
        validation:
          - command: "kubectl get cronjob hello 2>/dev/null || echo 'CronJob eliminado'"
            expectedOutput: "CronJob eliminado"
            errorMessage: "El CronJob 'hello' no fue eliminado correctamente."

      - name: "CronJob de Backup Avanzado"
        description: "Crea un CronJob más complejo que simule un escenario de backup de base de datos."
        steps:
          - "**Creando un CronJob de Backup Más Complejo:**"
          - "Ahora vamos a crear un ejemplo más realista que simule un backup de base de datos con múltiples configuraciones avanzadas."
          - "Crea un archivo YAML llamado `db-backup-cronjob.yaml` con el siguiente contenido:"
          - "```yaml"
          - "apiVersion: batch/v1"
          - "kind: CronJob"
          - "metadata:"
          - "  name: db-backup"
          - "  labels:"
          - "    app: database"
          - "    component: backup"
          - "spec:"
          - "  schedule: \"0 2 * * *\"  # Ejecuta diariamente a las 2:00 AM"
          - "  timezone: \"UTC\""
          - "  successfulJobsHistoryLimit: 7  # Mantiene 7 días de historial"
          - "  failedJobsHistoryLimit: 3"
          - "  concurrencyPolicy: Forbid"
          - "  startingDeadlineSeconds: 300  # Si el Job no inicia en 5min, se considera perdido"
          - "  jobTemplate:"
          - "    metadata:"
          - "      labels:"
          - "        app: database"
          - "        component: backup"
          - "    spec:"
          - "      activeDeadlineSeconds: 3600  # Timeout de 1 hora para el Job"
          - "      backoffLimit: 2  # Máximo 2 reintentos en caso de falla"
          - "      template:"
          - "        metadata:"
          - "          labels:"
          - "            app: database"
          - "            component: backup"
          - "        spec:"
          - "          containers:"
          - "          - name: backup"
          - "            image: busybox"
          - "            command:"
          - "            - /bin/sh"
          - "            - -c"
          - "            - |"
          - "              echo \"[$(date)] Iniciando backup de la base de datos...\""
          - "              echo \"[$(date)] Conectando a la base de datos...\""
          - "              sleep 10  # Simula tiempo de backup"
          - "              echo \"[$(date)] Creando dump de la base de datos...\""
          - "              sleep 15  # Simula proceso de dump"
          - "              echo \"[$(date)] Comprimiendo archivo de backup...\""
          - "              sleep 5"
          - "              echo \"[$(date)] Subiendo backup al almacenamiento...\""
          - "              sleep 8"
          - "              echo \"[$(date)] Backup completado exitosamente!\""
          - "              echo \"[$(date)] Archivo: db_backup_$(date +%Y%m%d_%H%M%S).sql.gz\""
          - "            env:"
          - "            - name: DB_HOST"
          - "              value: \"database.default.svc.cluster.local\""
          - "            - name: BACKUP_RETENTION_DAYS"
          - "              value: \"30\""
          - "            resources:"
          - "              limits:"
          - "                cpu: \"500m\""
          - "                memory: \"512Mi\""
          - "              requests:"
          - "                cpu: \"200m\""
          - "                memory: \"256Mi\""
          - "          restartPolicy: OnFailure"
          - "```"
          - "**Características Avanzadas de este CronJob:**"
          - "- `timezone`: Especifica la zona horaria (requiere Kubernetes 1.24+)"
          - "- `startingDeadlineSeconds`: Tiempo límite para iniciar un Job perdido"
          - "- `activeDeadlineSeconds`: Timeout máximo para la ejecución del Job"
          - "- `backoffLimit`: Número máximo de reintentos"
          - "- `resources`: Límites y requests de CPU/memoria"
          - "- Variables de ambiente para configuración"
          - "- Labels consistentes para organización"
          - "Aplica el CronJob al cluster:"
          - "`kubectl apply -f db-backup-cronjob.yaml`"
          - "Verifica que fue creado:"
          - "`kubectl get cronjob db-backup`"
          - "Como este CronJob está programado para ejecutar diariamente a las 2:00 AM, vamos a crear una ejecución manual para probarlo:"
          - "`kubectl create job --from=cronjob/db-backup backup-test`"
          - "Monitorea la ejecución:"
          - "`kubectl logs -l app=database,component=backup -f`"
          - "Verifica el estado del Job:"
          - "`kubectl get job backup-test`"
        tips:
          - type: "info"
            title: "Configuración de Timezone"
            content: "La configuración de timezone está disponible en Kubernetes 1.24+. En versiones anteriores, los CronJobs usan UTC."
          - type: "tip"
            title: "Secretos y ConfigMaps"
            content: "En un escenario real, las credenciales de la base de datos deberían ser pasadas como Secrets y otras configuraciones como ConfigMaps o variables de ambiente en lugar de hardcodearlas en el container."
          - type: "warning"
            title: "Recursos y Límites"
            content: "Siempre define resource requests y limits apropiados para tus CronJobs para evitar que consuman recursos excesivos del cluster."
        validation:
          - command: "kubectl get cronjob db-backup -o jsonpath='{.spec.schedule}'"
            expectedOutput: "0 2 * * *"
            errorMessage: "El CronJob de backup no fue configurado con la programación correcta."
