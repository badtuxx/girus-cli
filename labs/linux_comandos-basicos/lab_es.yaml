apiVersion: v1
kind: ConfigMap
metadata:
  name: linux-comandos-basicos-lab-es
  namespace: girus
  labels:
    app: girus-lab-template
data:
  lab.yaml: |
    name: linux-comandos-basicos-es
    title: "Fundamentos de Linux: Navegación y Comandos Esenciales"
    description: "Domina los comandos básicos y conceptos fundamentales de Linux necesarios para operar eficientemente en entornos de línea de comandos. Este laboratorio guiado explora la navegación del sistema de archivos, manipulación de archivos y gestión de procesos, proporcionando una base sólida para administración de sistemas y operaciones diarias en Linux."
    duration: 25m
    image: "linuxtips/girus-devops:0.1"
    tasks:
      - name: "Navegación en el Sistema de Archivos"
        description: "Comprende la estructura de directorios de Linux y aprende a navegar eficientemente por el sistema utilizando comandos esenciales."
        steps:
          - "**Comprendiendo el Sistema de Archivos Linux**"
          - "Linux organiza todos los archivos en una estructura jerárquica única, iniciando en el directorio raíz representado por `/`. A diferencia de Windows con sus unidades separadas (C:, D:), en Linux todo forma parte de un único árbol de directorios."
          - "Algunos directorios importantes incluyen:"
          - "- `/home`: Contiene los directorios personales de los usuarios"
          - "- `/etc`: Almacena archivos de configuración del sistema"
          - "- `/var`: Contiene datos variables como logs y colas"
          - "- `/bin` y `/usr/bin`: Almacenan programas (binarios) ejecutables"
          - "- `/tmp`: Archivos temporales, generalmente limpiados en el reinicio"
          - "**Ubicándose en el Sistema**"
          - "El primer paso para navegar eficientemente es saber dónde estás actualmente. Para esto, usamos el comando `pwd` (Print Working Directory):"
          - "`pwd`"
          - "Este comando muestra la ruta completa del directorio actual, partiendo desde la raíz `/`."
          - "**Listando Contenido de Directorios**"
          - "Para ver el contenido del directorio actual, usamos el comando `ls` (list). Por defecto, muestra solo archivos no-ocultos en formato simple:"
          - "`ls`"
          - "Para obtener información más detallada y ver archivos ocultos (que comienzan con `.`), usamos flags adicionales:"
          - "`ls -la`"
          - "Donde:"
          - "- `-l` activa el formato largo, mostrando permisos, propietario, tamaño, fecha de modificación, etc."
          - "- `-a` muestra todos los archivos, incluyendo los ocultos"
          - "**Significado de las columnas en la salida de `ls -l`:**"
          - "1. Tipo de archivo y permisos (ej: `-rw-r--r--`)"
          - "2. Número de enlaces"
          - "3. Propietario del archivo"
          - "4. Grupo del archivo"
          - "5. Tamaño en bytes"
          - "6. Fecha y hora de la última modificación"
          - "7. Nombre del archivo"
          - "**Creando y Navegando entre Directorios**"
          - "Para crear un nuevo directorio, usamos el comando `mkdir` (make directory):"
          - "`mkdir lab-practice`"
          - "Para cambiar a este directorio, usamos el comando `cd` (change directory):"
          - "`cd lab-practice`"
          - "Confirma que estás en el nuevo directorio:"
          - "`pwd`"
          - "**Creando Archivos Vacíos**"
          - "El comando `touch` es una manera simple de crear archivos vacíos o actualizar la fecha de modificación de archivos existentes:"
          - "`touch file1.txt file2.txt file3.txt`"
          - "Verifica los archivos creados:"
          - "`ls -l`"
          - "Verás que los archivos fueron creados con tamaño cero."
          - "**Navegación Avanzada**"
          - "Algunos atajos útiles para navegación:"
          - "- `cd ..`: Se mueve al directorio padre (un nivel arriba)"
          - "- `cd ~` o solo `cd`: Se mueve al directorio home del usuario actual"
          - "- `cd -`: Regresa al directorio anterior (donde estabas antes del último cd)"
          - "- `cd /`: Se mueve al directorio raíz del sistema"
          - "Experimenta volviendo un nivel arriba y luego regresando al directorio de práctica:"
          - "`cd ..`"
          - "`pwd`"
          - "`cd lab-practice`"
        tips:
          - type: "info"
            title: "Consejo: Atajos para Completar Nombres"
            content: "La tecla Tab es extremadamente útil para autocompletar nombres de archivos y directorios. Presiona Tab una vez para completar automáticamente si hay solo una opción, o dos veces para ver todas las posibilidades."
          - type: "tip"
            title: "Navegación Rápida"
            content: "Para navegación rápida, puedes combinar múltiples niveles en un solo comando: `cd ../../otro-dir` se mueve dos niveles arriba y luego a 'otro-dir'."
          - type: "warning"
            title: "Rutas Absolutas vs Relativas"
            content: "Las rutas que comienzan con / son absolutas (desde la raíz), mientras que otras son relativas al directorio actual. Usar rutas relativas generalmente hace que tus comandos sean más portables."
        validation:
          - command: "test -d lab-practice && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "El directorio 'lab-practice' no fue creado correctamente."
          - command: "test -f lab-practice/file1.txt && test -f lab-practice/file2.txt && test -f lab-practice/file3.txt && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "Los tres archivos de prueba no fueron creados correctamente."

      - name: "Manipulación de Archivos y Contenido"
        description: "Aprende a crear, editar, copiar y manipular archivos en Linux, entendiendo los conceptos de redirección y comandos para procesamiento de texto."
        steps:
          - "**Editores de Texto en Linux**"
          - "Linux ofrece diversos editores de texto para crear y modificar archivos. Los más comunes son:"
          - "- **vim/vi**: Poderoso, pero con curva de aprendizaje pronunciada"
          - "- **nano**: Más simple y amigable para principiantes"
          - "- **emacs**: Editor extensible y altamente personalizable"
          - "En este laboratorio, usaremos Vim debido a su ubicuidad - está presente en prácticamente todos los sistemas Linux."
          - "**Creando y Editando con Vim**"
          - "Vim opera en diferentes 'modos', siendo los principales el modo normal (navegación), modo de inserción (edición) y modo de comando (ejecutar comandos)."
          - "Vamos a crear un archivo de texto usando Vim:"
          - "`vim notes.txt`"
          - "Por defecto, Vim inicia en modo normal. Para insertar texto, presiona `i` para entrar al modo de inserción. Escribe las siguientes líneas:"
          - "```"
          - "Mis notas sobre Linux:"
          - "1. Linux es un sistema operativo basado en Unix"
          - "2. Fue creado por Linus Torvalds en 1991"
          - "3. El símbolo de Linux es un pingüino llamado Tux"
          - "```"
          - "Después de escribir, presiona la tecla `Esc` para volver al modo normal. Para guardar y salir:"
          - "1. Escribe `:` para entrar al modo de comando"
          - "2. Escribe `wq` (write and quit) y presiona Enter"
          - "**Flujo de trabajo básico en Vim:**"
          - "- `i`: Entrar al modo de inserción (antes del cursor)"
          - "- `a`: Entrar al modo de inserción (después del cursor)"
          - "- `Esc`: Volver al modo normal"
          - "- `:w`: Guardar (write)"
          - "- `:q`: Salir (quit)"
          - "- `:wq` o `ZZ`: Guardar y salir"
          - "- `:q!`: Salir sin guardar (forzar)"
          - "**Visualizando Contenido de Archivos**"
          - "Para visualizar el contenido de un archivo sin abrirlo para edición, hay varias opciones:"
          - "`cat notes.txt`"
          - "El comando `cat` muestra todo el contenido del archivo de una vez. Para archivos más grandes, es mejor usar:"
          - "`less notes.txt`"
          - "El `less` permite navegar por el archivo usando las teclas de flecha, Page Up/Down, etc. Presiona `q` para salir."
          - "Para ver solo las primeras o últimas líneas:"
          - "`head -n 2 notes.txt`  # Muestra las primeras 2 líneas"
          - "`tail -n 2 notes.txt`  # Muestra las últimas 2 líneas"
          - "**Copiando, Moviendo y Renombrando Archivos**"
          - "Para copiar un archivo:"
          - "`cp notes.txt notes-backup.txt`"
          - "Para mover o renombrar (en Linux, es la misma operación):"
          - "`mv notes-backup.txt backup-1.txt`"
          - "`ls -l`  # Ve que notes-backup.txt ahora es backup-1.txt"
          - "Para restaurar el nombre original:"
          - "`mv backup-1.txt notes-backup.txt`"
          - "**Comparando Archivos**"
          - "El comando `diff` permite ver las diferencias entre archivos:"
          - "`diff notes.txt notes-backup.txt`"
          - "No debe haber diferencias aún. Vamos a modificar el archivo original:"
          - "`echo 'Nueva línea agregada!' >> notes.txt`"
          - "El operador `>>` agrega la salida del comando `echo` al final del archivo sin reemplazar el contenido existente."
          - "Ahora, compara nuevamente:"
          - "`diff notes.txt notes-backup.txt`"
          - "Verás la diferencia: la línea adicional en el archivo original."
          - "**Redirección y Pipes**"
          - "Linux permite redirigir la salida de comandos a archivos u otros comandos:"
          - "- `>`: Redirige y sobrescribe el archivo"
          - "- `>>`: Redirige y agrega al archivo"
          - "- `|`: Pipe - envía la salida de un comando a la entrada de otro"
          - "Ejemplos:"
          - "`echo 'Contenido nuevo' > new-file.txt`  # Crea o sobrescribe"
          - "`echo 'Una línea más' >> new-file.txt`  # Agrega"
          - "`cat notes.txt | grep Linux`  # Filtra líneas que contienen 'Linux'"
        tips:
          - type: "warning"
            title: "Atención: Redirecciones"
            content: "El símbolo > redirige la salida y sobrescribe el archivo existente completamente. Ten cuidado de no perder datos importantes. Usa >> para agregar al final sin borrar el contenido anterior."
          - type: "tip"
            title: "Editor Alternativo"
            content: "Si no te sientes cómodo con Vim, intenta usar el editor nano que es más intuitivo: `nano notes.txt`. En nano, los comandos se muestran en la parte inferior de la pantalla, y Ctrl+O guarda, Ctrl+X sale."
          - type: "info"
            title: "Saliendo de Vim"
            content: "Si quedas atrapado en Vim sin saber cómo salir, presiona Esc (para garantizar que estás en modo normal) y luego escribe :q! y presiona Enter. Esto saldrá sin guardar cambios."
        validation:
          - command: "test -f lab-practice/notes.txt && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "El archivo notes.txt no fue creado correctamente."
          - command: "test -f lab-practice/notes-backup.txt && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "El archivo de respaldo no fue creado correctamente."
          - command: "grep -q 'Nueva línea agregada!' lab-practice/notes.txt && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "La nueva línea no fue agregada al archivo notes.txt."

      - name: "Gestión de Procesos"
        description: "Comprende cómo Linux gestiona procesos y aprende a monitorear, controlar y administrar aplicaciones en ejecución a través de la línea de comandos."
        steps:
          - "**Conceptos Fundamentales de Procesos en Linux**"
          - "En Linux, cada programa en ejecución está representado por uno o más procesos. Un proceso es esencialmente una instancia de un programa en ejecución, con su propio espacio de memoria, recursos e identificador único (PID - Process ID)."
          - "Los procesos pueden estar en diferentes estados:"
          - "- **Running**: Ejecutándose activamente o listo para ejecución"
          - "- **Sleeping**: Esperando algún evento o recurso"
          - "- **Stopped**: Pausado, generalmente por una señal"
          - "- **Zombie**: Proceso terminado, pero con entrada aún en la tabla de procesos"
          - "**Listando Procesos**"
          - "El comando más básico para listar procesos es `ps` (process status):"
          - "`ps`"
          - "Por defecto, `ps` muestra solo los procesos asociados a tu terminal actual. Para ver todos los procesos del sistema, usamos flags adicionales:"
          - "`ps aux`"
          - "Donde:"
          - "- `a`: Muestra procesos de todos los usuarios"
          - "- `u`: Formato orientado al usuario, con columnas como %CPU, %MEM"
          - "- `x`: Incluye procesos sin terminal de control"
          - "La salida contiene columnas importantes como:"
          - "- **USER**: Propietario del proceso"
          - "- **PID**: ID del proceso"
          - "- **%CPU/%MEM**: Porcentaje de CPU y memoria utilizadas"
          - "- **STAT**: Estado del proceso (R=running, S=sleeping, Z=zombie, etc.)"
          - "- **COMMAND**: Comando que inició el proceso"
          - "**Monitoreo en Tiempo Real**"
          - "Para monitorear procesos en tiempo real, usamos herramientas como `top` o `htop`:"
          - "`htop`"
          - "El `htop` es una versión mejorada del `top`, con interfaz colorida e interactiva. Muestra:"
          - "- Gráficos de uso de CPU y memoria"
          - "- Lista de procesos ordenable (F6)"
          - "- Filtros (F4) y búsqueda"
          - "- Opciones para enviar señales a procesos (F9)"
          - "Navega usando las teclas de flecha y presiona `q` para salir."
          - "**Ejecutando Procesos en Segundo Plano**"
          - "En Linux, podemos fácilmente ejecutar procesos en background (segundo plano) usando el operador `&`:"
          - "`sleep 300 &`"
          - "Este comando inicia un proceso que simplemente \"duerme\" por 300 segundos (5 minutos), pero lo hace en segundo plano, liberando el terminal para otros comandos."
          - "El sistema mostrará el PID del proceso en background, algo como `[1] 12345`."
          - "**Verificando Procesos en Background**"
          - "Para ver los jobs (tareas) en ejecución en segundo plano en tu terminal actual:"
          - "`jobs`"
          - "Para encontrar un proceso específico por nombre, podemos usar `grep` con `ps`:"
          - "`ps aux | grep sleep`"
          - "Observa que este comando también mostrará el propio proceso `grep`."
          - "**Controlando Procesos**"
          - "Linux proporciona varios comandos para controlar procesos en ejecución:"
          - "- `kill [PID]`: Envía una señal (por defecto, SIGTERM) para terminar graciosamente"
          - "- `kill -9 [PID]` o `kill -KILL [PID]`: Fuerza el cierre inmediato (usar con precaución)"
          - "- `killall [nombre]`: Termina todos los procesos con el nombre especificado"
          - "- `pkill [patrón]`: Termina procesos que coinciden con un patrón"
          - "Vamos a terminar el proceso `sleep` que iniciamos:"
          - "`pkill sleep`"
          - "Verifica si el proceso fue terminado:"
          - "`ps aux | grep sleep`"
          - "Ahora deberías ver solo el proceso `grep` en la salida."
          - "**Prioridad de Procesos**"
          - "En Linux, cada proceso tiene una prioridad ('nice') que va de -20 (mayor prioridad) a 19 (menor prioridad). Podemos iniciar un proceso con prioridad específica:"
          - "`nice -n 10 sleep 60 &`"
          - "O alterar la prioridad de un proceso en ejecución (requiere permisos elevados para aumentar la prioridad):"
          - "`renice +5 [PID]`"
        tips:
          - type: "tip"
            title: "Alternativa al top"
            content: "El comando htop es una versión mejorada del top con interfaz colorida e interactiva. Si no está instalado, puedes hacerlo con 'sudo apt install htop' en sistemas Debian/Ubuntu."
          - type: "info"
            title: "Procesos Zombis"
            content: "Los procesos zombis (estado Z) son procesos que terminaron, pero cuyo estado de salida aún no ha sido recolectado por el proceso padre. Generalmente son inofensivos a menos que existan en gran número."
          - type: "warning"
            title: "Kill -9"
            content: "La señal SIGKILL (kill -9) fuerza el cierre inmediato del proceso sin permitir limpieza de recursos. Úsala solo cuando otras señales fallen, ya que puede causar pérdida de datos o recursos no liberados."
        validation:
          - command: "ps aux | grep -v grep | grep -q sleep || echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "El proceso sleep no fue terminado correctamente."
          - command: "command -v htop &>/dev/null || echo 'instala htop'; echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "El comando htop no está disponible."

      - name: "Gestión de Permisos Básicos"
        description: "Entiende el sistema de permisos de Linux y aprende a controlar el acceso a archivos y directorios de forma segura y eficiente."
        steps:
          - "**Sistema de Permisos de Linux**"
          - "Linux implementa un sistema de permisos basado en usuarios y grupos que controla quién puede acceder a archivos y directorios y qué pueden hacer con ellos."
          - "Cada archivo y directorio en Linux tiene tres niveles de permisos:"
          - "- **Propietario (u)**: El usuario que posee el archivo"
          - "- **Grupo (g)**: El grupo asociado al archivo"
          - "- **Otros (o)**: Todos los demás usuarios"
          - "**Tipos de Permisos**"
          - "Cada nivel puede tener tres tipos de permisos:"
          - "- **r (read)**: Permite leer el contenido"
          - "- **w (write)**: Permite modificar el contenido"
          - "- **x (execute)**: Permite ejecutar (para archivos) o acceder (para directorios)"
          - "**Visualizando Permisos**"
          - "Cuando usamos `ls -l`, vemos los permisos en el primer campo de la salida:"
          - "`ls -l`"
          - "El formato es: `rwxrwxrwx`"
          - "- Primeros 3 caracteres: permisos del propietario"
          - "- 3 caracteres del medio: permisos del grupo"
          - "- Últimos 3 caracteres: permisos para otros"
          - "Un `-` indica que el permiso está ausente."
          - "**Alterando Permisos**"
          - "El comando `chmod` (change mode) permite alterar permisos. Hay dos notaciones principales:"
          - "**Notación simbólica**: Usando letras y símbolos"
          - "Crea un archivo para prueba:"
          - "`echo 'Archivo de prueba para permisos' > perm_test.txt`"
          - "Verifica los permisos actuales:"
          - "`ls -l perm_test.txt`"
          - "Agrega permiso de ejecución para el propietario:"
          - "`chmod u+x perm_test.txt`"
          - "Remueve permiso de lectura para otros:"
          - "`chmod o-r perm_test.txt`"
          - "Define permisos para lectura y escritura para todos:"
          - "`chmod a=rw perm_test.txt`"
          - "**Notación octal**: Usando números (más concisa)"
          - "Cada permiso tiene un valor numérico:"
          - "- r = 4"
          - "- w = 2"
          - "- x = 1"
          - "La suma de estos valores para cada nivel define los permisos:"
          - "`chmod 644 perm_test.txt`  # rw-r--r--"
          - "`chmod 755 perm_test.txt`  # rwxr-xr-x"
          - "`chmod 600 perm_test.txt`  # rw-------"
          - "**Alterando Propietario y Grupo**"
          - "El comando `chown` (change owner) altera el propietario y/o grupo:"
          - "`sudo chown root perm_test.txt`  # Cambia solo el propietario"
          - "`sudo chown root:root perm_test.txt`  # Cambia propietario y grupo"
          - "El comando `chgrp` cambia solo el grupo:"
          - "`sudo chgrp root perm_test.txt`"
          - "**Permisos Especiales para Directorios**"
          - "Para directorios, los permisos tienen significados ligeramente diferentes:"
          - "- **r**: Permite listar el contenido"
          - "- **w**: Permite crear, renombrar o remover archivos dentro del directorio"
          - "- **x**: Permite acceder al directorio"
          - "Crea un directorio para prueba:"
          - "`mkdir test_dir`"
          - "Define permisos de forma recursiva (para el directorio y su contenido):"
          - "`chmod -R 750 test_dir`  # rwxr-x---"
        tips:
          - type: "info"
            title: "Permisos de Directorio"
            content: "El permiso de ejecución (x) en directorios es crucial: sin él, no puedes acceder a los archivos dentro de él, incluso si tienes permisos para esos archivos."
          - type: "warning"
            title: "Seguridad"
            content: "Evita dar permisos muy abiertos (ej: 777) a archivos y directorios. Esto representa un riesgo de seguridad, especialmente en entornos multiusuario o servidores."
          - type: "tip"
            title: "Permisos y Comandos sudo"
            content: "Comandos como chown normalmente requieren privilegios de superusuario (sudo). Si recibes errores de permisos, verifica si estás usando sudo cuando sea necesario."
        validation:
          - command: "test -f lab-practice/perm_test.txt && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "El archivo perm_test.txt no fue creado correctamente."
          - command: "test -d lab-practice/test_dir && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "El directorio test_dir no fue creado correctamente."
